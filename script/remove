#!/usr/bin/env bash
# Completely remove all bootstrapped setup
set -e

[[ "$1" = "--debug" || -o xtrace ]] && DEBUG="1"

sudo_askpass() {
  if [ -n "$SUDO_ASKPASS" ]; then
    sudo --askpass "$@"
  else
    sudo "$@"
  fi
}

cleanup() {
  set +e
  sudo_askpass rm -rf "$SUDO_ASKPASS" "$SUDO_ASKPASS_DIR"
  sudo --reset-timestamp
}

trap "cleanup" EXIT

if [ -n "$DEBUG" ]; then
  set -x
else
  QUIET_FLAG="-q"
  Q="$QUIET_FLAG"
fi

# We want to always prompt for sudo password at least once rather than doing
# root stuff unexpectedly.
sudo --reset-timestamp

# functions for turning off debug for use when handling the user password
clear_debug() {
  set +x
}

reset_debug() {
  if [ -n "$DEBUG" ]; then
    set -x
  fi
}

# Initialise (or reinitialise) sudo to save unhelpful prompts later.
sudo_init() {
  local SUDO_PASSWORD SUDO_PASSWORD_SCRIPT

  if ! sudo --validate --non-interactive &>/dev/null; then
    while true; do
      read -rsp "--> Enter your password (for sudo access):" SUDO_PASSWORD
      echo
      if sudo --validate --stdin 2>/dev/null <<<"$SUDO_PASSWORD"; then
        break
      fi

      unset SUDO_PASSWORD
      echo "!!! Wrong password!" >&2
    done

    clear_debug
    SUDO_PASSWORD_SCRIPT="$(cat <<BASH
#!/bin/bash
echo "$SUDO_PASSWORD"
BASH
)"
    unset SUDO_PASSWORD
    SUDO_ASKPASS_DIR="$(mktemp -d)"
    SUDO_ASKPASS="$(mktemp "$SUDO_ASKPASS_DIR"/remove-askpass-XXXXXXXX)"
    chmod 700 "$SUDO_ASKPASS_DIR" "$SUDO_ASKPASS"
    bash -c "cat > '$SUDO_ASKPASS'" <<<"$SUDO_PASSWORD_SCRIPT"
    unset SUDO_PASSWORD_SCRIPT
    reset_debug

    export SUDO_ASKPASS
  fi
}

sudo_refresh() {
  clear_debug
  if [ -n "$SUDO_ASKPASS" ]; then
    sudo --askpass --validate
  else
    sudo_init
  fi
  reset_debug
}

abort() { echo "!!! $*" >&2; exit 1; }
log()   { sudo_refresh; echo "--> $*"; }
logn()  { sudo_refresh; printf -- "--> %s " "$*"; }
logk()  { echo "OK"; }


[ "$USER" = "root" ] && abort "Run bootstrap as yourself, not root."
groups | grep "$Q" -E "\b(admin)\b" || abort "Add $USER to the admin group."

# Prevent sleeping during script execution, as long as the machine is on AC power
caffeinate -s -w $$ &

echo "This will completely remove these dotfiles and return the system to its prior state"

read -r -p "Are you sure you? [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
then
  echo "Please remove the added themes from Terminal.app manually."

  # macOS Command Line Tools
  if [ -d "$(xcode-select -p)" ]; then
    echo "Removing Command Line Tools..."
    sudo rm -rf "$(xcode-select -p)"
  fi

  # Homebrew
  echo "Removing Homebrew brews..."
  while [[ $(brew list --formula | wc -l) -ne 0 ]]; do
    for EACH in $(brew list); do
        brew uninstall --formula --force --ignore-dependencies "$EACH"
    done
  done
  echo "Removing Homebrew casks..."
  while [[ $(brew list --cask | wc -l) -ne 0 ]]; do
    for EACH in $(brew list); do
        brew uninstall --cask --force --ignore-dependencies "$EACH"
    done
  done

  echo "Removing Homebrew..."
  sudo_askpass dscl . -create "/Users/$USER" UserShell "/bin/zsh"
  curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh | bash -s -- --force
  [ -d "/opt/homebrew" ] && sudo rm -rf /opt/homebrew

  # dotfiles
  echo "Removing dotfiles..."
  rm -rf "$HOME/.Brewfile.lock.json" "$HOME/.local/" "$HOME/.cache/" "$HOME/.nodenv/" "$HOME/.vscode/" "$HOME/.zplug/"
  rm -rf "$HOME/.dotfiles"
  find "$HOME" -maxdepth 1 -type l ! -exec test -e {} \; -delete
fi
